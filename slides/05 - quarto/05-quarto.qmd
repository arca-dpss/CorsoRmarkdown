---
title: "05 - quarto"
lang: it
date: today
author: "Ottavia M. Epifania"
institute: "Corsi ARCA"
format: 
  revealjs: 
    slide-number: true
    show-slide-number: all
    embed-resources: true
    theme: theme_arca.scss
    logo: /img/arca_logo.png
    menu: 
      side: left
      width: normal
editor: source
execute: 
  eval: true
  echo: fenced
  warning: false
  fig-align: center
  out-width: 80%
---



## Quarto {.build}
```{css, echo=FALSE}
.title {
  font-size: 140px;
  color: #9B0014;
  font-family: Palatino Linotype;
  font-variant: small-caps;
}

code.r {
  font-size: 16pt;
}

code {
  font-size: 16pt;
  line-height: 1.2;
}

body {
  line-height: 2.2;
}

output.r {
  font-size: 22pt;
}
```

<br>

<br>

<br>


[Quarto](https://quarto.org/) è il "nuovo" strumento di integrazione codice/analisi/scrittura di `R`Studio

In realtà funziona anche su Python, Julia, Jupyter

Segue molto la logica di RMarkdown e Markdown in generale.... ma va oltre!

I file hanno estensione `.qmd`

. . . 

<br>



<div text-align="center">

DISCLAIMER

</div>

<br>

Essendo uno strumento molto nuovo, lo conosco ancora poco e vedremo solo alcuni aspetti interessanti (che so usare con sicurezza)


## Cosa sa fare?

<br>

Tutto quello che sa fare RMarkdown... e oltre

- Presentazioni in HTML 

- Presentazioni interattive in HTML (con shiny)

- Documenti in HTML con molte features in più 



<br>

<font size = "4">(Le slide di questa lezione sono fatte in quarto. Ci sto ancora prendendo la mano)</font>



## I comandi 


:::: {.columns}


::: {.column width="50%"}
<span style="color:#9B0014">RMarkdown</span>

- Elenco puntato/Numerato

<br>

- Cambiare colore alle parole 

<br>

- Link 

<br>

- Tabelle 

<br>

- Chunk di codice

<br>

- Immagini
:::

::: {.column width="50%"}
<span style="color:#9B0014">Quarto</span>

- Elenco puntato/Numerato

<br>

- Cambiare colore alle parole 

<br>

- Link

<br>

- Abbastanza  

<br> 

- Abbastanza

<br>

- Abbastanza
:::

::::

## Nuovo documento

File $\rightarrow$ New File $\rightarrow$ Quarto document: 



![Nuovo documento quarto](img/new_quarto.png){width=80%, #fig-newquarto}

## 

Il nuovo documento è un po' diverso rispetto ai documenti `.Rmd`


::: {layout-ncol=2}

![Visual](img/q_visual.png){width="50%"}

![Source](img/q_source.png){width="60%"}

:::



## YAML: Al posto del setup chunk 

Manca il `setup` chunk!

In Quarto, va specificato tutto nello `yaml` 

````
---
title: "Untitled"
format: html
editor: visual
---
````

aggiungendo la voce `execute`: 

````
---
title: "Untitled"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  [...]
---
````
 e utilizzando i tag già visti per RMarkdown
 
## YAML: Cambiare la lingua


Va specificata la lingua in cui state scrivendo per avere le caption delle figure/tabelle coerenti: 

````
---
title: "Il mio titolo"
author: "Ciccio Pasticcio"
format: html
editor: source
execute: 
  eval: true
  [...]
lang:it
---
````

## YAML: Table of Contents

````
---
title: "Il mio file"
author: "Ciccio Pasticcio"
date: today
format: 
  html:
    toc: true
    toc-title: I miei contenuti
    toc-location: body, left, right
    toc-depth: 3
editor: source
lang: it
---
````

::: {layout-ncol=3}


![body](img/tocBody.png){width="40%"}

![left](img/tocLeft.png){width="40%"}

![right](img/tocRight.png){width="40%"}

:::

## YAML: Guarda il codice!

````
---
[...]
format: 
  html:
    toc: true
    toc-title: I miei contenuti
    toc-location: body, left, right
    toc-depth: 3
    code-tools: 
      source: true
      toggle: false
      caption: none
---
````


:::: {.columns}


::: {.column width="50%"}

![](img/code.png){width="100%"}

:::

::: {.column width="50%"}

![](img/codeDet.png){width="100%"}

:::

::::



## Guarda il codice, metodo 2


````
---
[...]
format:
  html:
    code-fold: true
---
````

```{r}
#| code-fold: true

library(ggplot2)
ggplot(mtcars, 
       aes(x = disp, y = hp, color = mpg, size = mpg)) + geom_point()


```



## YAML: Si può cambiare tema

Il tema di default è già molto carino... ma ce ne sono altri 25!

````
---
[...]
format: 
  html:
    theme: superhero
---
````

A [questa pagina](https://quarto.org/docs/output-formats/html-themes.html) trovate la lista completa dei temi 

![](img/superhero.png)


## Chunk di codice 

Si creano sempre o cliccando sulla loro icona in alto a destra o con la combo di tasti `ctrl + alt + i` 

I comandi sui chunk sono gli stessi (`echo`, `eval`, `message` ecc.) ma vengono passati in modo diverso attraverso il tag: `#| ` scritto direttamente all'interno del chunk.

<!-- ```` -->
<!-- ```{r}`r ''` -->
<!-- #| echo: true -->
<!-- #| eval: true -->
<!-- #| comment: "=)" -->
<!-- 1 + 1 -->
<!-- ``` -->
<!-- ```` -->

```{r}
#| eval: true
#| comment: "=)"

1+1
```

## Importare immagini: Chunk di codice 

````

Il quadro di Pellizza da Volpedo in @fig-prima

```{r}`r ''`
#| fig-cap: "La mia immagine"
#| fig-cap-location: top
#| out-width: 50%
#| label: fig-prima
#| fig-align: center
knitr::include_graphics("img/quartoStato.jpg")
```
````
. . .

<font size="4">Il quadro di Pellizza da Volpedo in @fig-prima</font>

```{r}
#| fig-cap: "La mia immagine"
#| fig-cap-location: top
#| out-width: 50%
#| label: fig-prima
#| fig-align: center
#| echo: false
knitr::include_graphics("img/quartoStato.jpg")
```


## Importare immagini: Markdown

````
![Caption della figura](percorso-alla-figura.png)

````

Si possono aggiungere le opzioni: 

````
![Caption della figura](percorso-alla-figura.png){#fig-label}

In @fig-label c'è una figura
````

In @fig-psicostat c'è il logo di Psicostat

![PsicoStat](img/psicostat.png){#fig-psicostat}




## I grafici 
````
```{r}`r ''`
#| fig-cap: "Il mio grafico"
#| fig-cap-location: top
#| out-width: 50%
#| fig-align: center
#| label: fig-grafico
library(ggplot2)
ggplot(rock, 
       aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() + 
  theme_light() + theme(legend.position = "none") 

```
In @fig-grafico c'è un grafico

````

<font size="3">In @fig-grafico c'è un grafico</font>


```{r}
#| echo: false
#| fig-cap: "Il mio grafico"
#| fig-cap-location: top
#| out-width: 50%
#| fig-align: center
#| label: fig-grafico
library(ggplot2)
ggplot(rock, 
       aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() + 
  theme_light() + theme(legend.position = "none") 

```


## Your turn!

<br> 

<br>

- Create un nuovo documento `quarto`

- Impostate il toc a destra e cambiate il titolo 

- Inserite un'immagine allineata a destra con la sua caption (Chunk di codice)
  
- Inserite un'immagine con la sua caption e un link al suo interno (Markdown)

- Inserite un grafico del vostro dataset con un crossref nel testo

# Le tabelle 

## `kable`

````
Qui c'è @tbl-esempio
````
Qui c'è @tbl-esempio


```{r}
#| tbl-cap-location: top
#| tbl-cap: Una tabella di esempio
#| tbl-subcap: per far vedere come funzionano
#| label: tbl-esempio

kableExtra::kable(mtcars[1:6, ])
```


# Layout 

## Colonne 

````
:::: {.columns}


::: {.column width="50%"}

testo nella prima colonna

:::

::: {.column width="50%"}

Testo nella seconda colonna

:::

::::
````

## Colonne 

:::: {.columns}


::: {.column width="50%"}

Testo nella prima colonna

<br>

Si possono mettere anche immagini

:::

::: {.column width="50%"}

Testo nella seconda colonna

<br>

```{r}
head(cars)
```

:::

::::

## "Griglie"




```{r}
#| echo: false
#| fig-align: center
#| out-width: 120%

knitr::include_graphics("img/grid.png")
```


## "Griglie": Codice

Permettono di gestire lo spazio come le colonne 

Assume che la lunghezza totale della riga sia 12 e permette di dividere lo spazio di conseguenza
````
::: {.grid}

::: {.g-col-4}

Prima colonna più stretta della seconda dove parlo del mio grafico

:::

::: {.g-col-8}

Colonna più larga con il codice per ottenere il grafico

:::

:::
````



## tabset 
Ha un effetto bellissimo ed è particolarmente comodo ed efficace per presentare diversi aspetti di uno stesso argomento

::: {.panel-tabset}

## Introduzione

Descrizione del mio dataset 

## I dati

```{r}
kableExtra::kable(head(rock))
```

## Il grafico


```{r}
#| echo: false
#| out-width: "100%"
#| fig-align: center
library(ggplot2)
ggplot(rock, 
       aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() + 
  theme_light() + theme(legend.position = "none") 
```


:::

## Tabset: Codice

````
::: {.panel-tabset}

## Introduzione

Descrizione del mio dataset 

## I dati


Primo tabset con una tabella contenente il dataset


## Il grafico

Terzo tabset con il grafico dei dati


:::
````

## Your turn! 

<br>

- Dividete una parte del documento in 3 colonne (potete usare sia l'ambiente colonna sia l'ambiente griglia)

- Create almeno una sezione con i tabset con tre pannelli

- In almeno un tabset deve esserci una figura con caption e cross ref nel testo 